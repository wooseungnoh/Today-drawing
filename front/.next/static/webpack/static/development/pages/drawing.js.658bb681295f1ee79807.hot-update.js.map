{"version":3,"file":"static/webpack/static\\development\\pages\\drawing.js.658bb681295f1ee79807.hot-update.js","sources":["webpack:///./pages/drawing.js"],"sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { CompactPicker } from 'react-color';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport AskUploadModal from '../components/askUploadModal';\r\nimport Container from '../components/container';\r\nimport { Button, InputContainer } from '../components/uiComponent';\r\nimport { Canvas, PainterSize, Ul, Li } from '../components/canvas';\r\nimport { MODAL_ON } from '../reducers/drawing';\r\n\r\nconst Input = styled.input``;\r\n\r\nconst Upload = () => {\r\n  const [colorPicker, setColorPicker] = useState(false);\r\n  const [background, setBackground] = useState('#000');\r\n  const { modalState } = useSelector((state) => state.drawing);\r\n  const dispatch = useDispatch();\r\n  const [lineSize, setLineSize] = useState(2.5);\r\n  const [canvasState, setCanvasState] = useState({\r\n    painter: false,\r\n    strokeStyle: '#000',\r\n    lineWidth: 2.5,\r\n    defaultCanvasSize: 500,\r\n  });\r\n  const canvas = useRef();\r\n\r\n  const startPainting = () => {\r\n    setCanvasState({\r\n      ...canvasState,\r\n      painter: true,\r\n    });\r\n  };\r\n\r\n  const stopPainting = () => {\r\n    setCanvasState({\r\n      ...canvasState,\r\n      painter: false,\r\n    });\r\n  };\r\n  const onMouseMove = (e) => {\r\n    const { offsetY: y, offsetX: x } = e.nativeEvent;\r\n    const ctx = canvas.current.getContext('2d');\r\n\r\n    if (!canvasState.painter) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(x, y);\r\n    } else {\r\n      ctx.lineTo(x, y);\r\n      ctx.stroke();\r\n    }\r\n  };\r\n\r\n  const colorChange = (e) => {\r\n    const ctx = canvas.current.getContext('2d');\r\n    ctx.strokeStyle = e.nativeEvent.target.style.backgroundColor;\r\n    setCanvasState({\r\n      ...canvasState,\r\n      strokeStyle: e.nativeEvent.target.style.backgroundColor,\r\n    });\r\n  };\r\n\r\n  const lineWidthChange = (e) => {\r\n    const ctx = canvas.current.getContext('2d');\r\n    const size = e.nativeEvent.target.value;\r\n    ctx.lineWidth = size;\r\n  };\r\n\r\n  const lineChange = (e) => {\r\n    const size = e.nativeEvent.target.value;\r\n    setLineSize(size);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    const image = canvas.current.toDataURL();\r\n    const link = document.createElement('a');\r\n    link.href = image;\r\n    link.download = 'myImg';\r\n    link.click();\r\n    setTimeout(() => {\r\n      dispatch({\r\n        type: MODAL_ON,\r\n      });\r\n    }, 2500);\r\n  };\r\n\r\n  const handleChangeColor = (color) => {\r\n    const ctx = canvas.current.getContext('2d');\r\n    ctx.strokeStyle = color.hex;\r\n    setCanvasState({\r\n      ...canvasState,\r\n      strokeStyle: `${color.hex}`,\r\n    });\r\n  };\r\n\r\n  const togleState = () => {\r\n    setColorPicker((prev) => !prev);\r\n  };\r\n\r\n  useEffect(() => {\r\n    canvas.current.width = canvasState.defaultCanvasSize;\r\n    canvas.current.height = canvasState.defaultCanvasSize;\r\n\r\n    const ctx = canvas.current.getContext('2d');\r\n\r\n    ctx.strokeStyle = canvasState.strokeStyle;\r\n    ctx.lineWidth = canvasState.lineWidth;\r\n    ctx.lineCap = 'round';\r\n    ctx.lineJoin = 'round';\r\n    ctx.fillStyle = 'white';\r\n    ctx.fillRect(\r\n      0,\r\n      0,\r\n      canvasState.defaultCanvasSize,\r\n      canvasState.defaultCanvasSize,\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <AskUploadModal modalState={modalState} />\r\n      <Container flexDirection=\"column\">\r\n        <h2 style={{ margin: 0 }}>그림 그리기</h2>\r\n        <Container\r\n          style={{\r\n            padding: '15px 0 1',\r\n            width: '580px',\r\n            position: 'relative',\r\n            height: '600px',\r\n          }}\r\n        >\r\n          <Canvas\r\n            ref={canvas}\r\n            onMouseMove={onMouseMove}\r\n            onMouseDown={startPainting}\r\n            onMouseUp={stopPainting}\r\n            onMouseLeave={stopPainting}\r\n          />\r\n          <InputContainer>\r\n            <PainterSize size={lineSize} color={canvasState.strokeStyle} />\r\n            <Input\r\n              type=\"range\"\r\n              min=\"0.1\"\r\n              max=\"100\"\r\n              defaultValue={lineSize}\r\n              onChange={lineChange}\r\n              onMouseUp={lineWidthChange}\r\n            />\r\n          </InputContainer>\r\n          <Ul>\r\n            <Li\r\n              scale\r\n              style={{ backgroundColor: '#000000' }}\r\n              onClick={colorChange}\r\n            />\r\n            <Li\r\n              scale\r\n              style={{ backgroundColor: '#00a8ff' }}\r\n              onClick={colorChange}\r\n            />\r\n            <Li\r\n              scale\r\n              style={{ backgroundColor: '#9c88ff' }}\r\n              onClick={colorChange}\r\n            />\r\n            <Li\r\n              scale\r\n              style={{ backgroundColor: '#fbc531' }}\r\n              onClick={colorChange}\r\n            />\r\n            <Li\r\n              scale\r\n              style={{ backgroundColor: '#e84118' }}\r\n              onClick={colorChange}\r\n            />\r\n            <Li\r\n              scale\r\n              style={{ backgroundColor: '#ffffff', border: '1px solid black' }}\r\n              onClick={colorChange}\r\n            />\r\n            <Li>\r\n              <div\r\n                onClick={togleState}\r\n                style={{\r\n                  width: '100%',\r\n                  height: '100%',\r\n                  background: 'url(\"/static/color_circle.png\")',\r\n                  borderRadius: '50%',\r\n                  backgroundSize: 'cover',\r\n                }}\r\n              ></div>\r\n              {colorPicker ? (\r\n                <div\r\n                  style={{ position: 'relative', left: '-200px', top: '10px' }}\r\n                >\r\n                  <CompactPicker\r\n                    color={canvasState.strokeStyle}\r\n                    onChangeComplete={handleChangeColor}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n            </Li>\r\n          </Ul>\r\n        </Container>\r\n        <Button style={{ marginTop: '25px' }} onClick={handleSave}>\r\n          SAVE\r\n        </Button>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Upload;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAHA;AACA;AAGA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAOA;AACA;AACA;AACA;AAJA;AANA;AAAA;AACA;AAWA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;A","sourceRoot":""}