{"version":3,"file":"static/webpack/static\\development\\pages\\drawing.js.171ee806d53548ac1809.hot-update.js","sources":["webpack:///./pages/drawing.js"],"sourcesContent":["import Link from 'next/link';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport Container from '../components/container';\r\nimport { Button, Input, InputContainer } from '../components/uiComponent';\r\nimport { Canvas, PainterSize, Ul, Li } from '../components/canvas';\r\n\r\nconst Upload = () => {\r\n  const [lineSize, setLineSize] = useState(2.5);\r\n  const [canvasState, setCanvasState] = useState({\r\n    painter: false,\r\n    strokeStyle: '#000',\r\n    lineWidth: 2.5,\r\n    defaultCanvasSize: 550,\r\n  });\r\n  const canvas = useRef();\r\n\r\n  const startPainting = () => {\r\n    setCanvasState({\r\n      ...canvasState,\r\n      painter: true,\r\n    });\r\n  };\r\n\r\n  const stopPainting = () => {\r\n    setCanvasState({\r\n      ...canvasState,\r\n      painter: false,\r\n    });\r\n  };\r\n  const onMouseMove = (e) => {\r\n    const { offsetY: y, offsetX: x } = e.nativeEvent;\r\n    const ctx = canvas.current.getContext('2d');\r\n\r\n    if (!canvasState.painter) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(x, y);\r\n    } else {\r\n      ctx.lineTo(x, y);\r\n      ctx.stroke();\r\n    }\r\n  };\r\n\r\n  const colorChange = (e) => {\r\n    const ctx = canvas.current.getContext('2d');\r\n    ctx.strokeStyle = e.nativeEvent.target.style.backgroundColor;\r\n    setCanvasState({\r\n      ...canvasState,\r\n      strokeStyle: e.nativeEvent.target.style.backgroundColor,\r\n    });\r\n  };\r\n\r\n  const lineWidthChange = (e) => {\r\n    const ctx = canvas.current.getContext('2d');\r\n    const size = e.nativeEvent.target.value;\r\n    ctx.lineWidth = size;\r\n  };\r\n\r\n  const lineChange = (e) => {\r\n    const size = e.nativeEvent.target.value;\r\n    setLineSize(size);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    const image = canvas.current.toDataURL();\r\n    const link = document.createElement('a');\r\n    link.href = image;\r\n    link.download = 'myImg';\r\n    link.click();\r\n  };\r\n\r\n  useEffect(() => {\r\n    canvas.current.width = canvasState.defaultCanvasSize;\r\n    canvas.current.height = canvasState.defaultCanvasSize;\r\n\r\n    const ctx = canvas.current.getContext('2d');\r\n\r\n    ctx.strokeStyle = canvasState.strokeStyle;\r\n    ctx.lineWidth = canvasState.lineWidth;\r\n    ctx.lineCap = 'round';\r\n    ctx.lineJoin = 'round';\r\n    ctx.fillStyle = 'white';\r\n    ctx.fillRect(\r\n      0,\r\n      0,\r\n      canvasState.defaultCanvasSize,\r\n      canvasState.defaultCanvasSize,\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <Container flexDirection=\"column\" style={{margin:\"100px 0\"}}>\r\n      <h2 style={{ margin: 0 }}>그림 그리기</h2>\r\n      <Container\r\n        style={{ padding: '50px', position: 'relative', width: '700px' }}\r\n      >\r\n        <Canvas\r\n          ref={canvas}\r\n          onMouseMove={onMouseMove}\r\n          onMouseDown={startPainting}\r\n          onMouseUp={stopPainting}\r\n          onMouseLeave={stopPainting}\r\n        />\r\n        <Ul>\r\n          <Li style={{ backgroundColor: '#000000' }} onClick={colorChange} />\r\n          <Li style={{ backgroundColor: '#00a8ff' }} onClick={colorChange} />\r\n          <Li style={{ backgroundColor: '#9c88ff' }} onClick={colorChange} />\r\n          <Li style={{ backgroundColor: '#fbc531' }} onClick={colorChange} />\r\n          <Li style={{ backgroundColor: '#e84118' }} onClick={colorChange} />\r\n          <Li\r\n            style={{ backgroundColor: '#ffffff', border: '1px solid black' }}\r\n            onClick={colorChange}\r\n          />\r\n        </Ul>\r\n        <InputContainer>\r\n          <PainterSize size={lineSize} color={canvasState.strokeStyle} />\r\n          <Input\r\n            type=\"range\"\r\n            min=\"0.1\"\r\n            max=\"100\"\r\n            defaultValue={lineSize}\r\n            onChange={lineChange}\r\n            onMouseUp={lineWidthChange}\r\n          />\r\n        </InputContainer>\r\n      </Container>\r\n      <Container>\r\n        <Button onClick={handleSave}>SAVE</Button>\r\n        <Input type=\"file\" />\r\n      </Container>\r\n      <Link href=\"\" style={{margin:\"15px 0\"}}>\r\n        <a>업로드하기</a>\r\n      </Link>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Upload;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAFA;AAAA;AACA;AAOA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}