{"ast":null,"code":"var _jsxFileName = \"D:\\\\todayDraw\\\\front\\\\pages\\\\upload.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport Container from '../components/container';\nimport styled from 'styled-components';\nconst Ul = styled.ul`\n  position: absolute;\n  display: flex;\n  flex-direction: row;\n  transition: 0.5s;\n`;\nconst Li = styled.li`\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  list-style: none;\n`;\nconst Canvas = styled.canvas`\n  width: 700px;\n  height: 700px;\n  border-radius: 15px;\n  background: #ffffff;\n  box-shadow: 18px 18px 25px #00000057, -18px -18px 25px #ffffff;\n`;\n\nconst Upload = () => {\n  const {\n    0: canvasState,\n    1: setCanvasState\n  } = useState({\n    painter: false,\n    strokeStyle: '#000',\n    lineWidth: 2.5\n  });\n  const canvas = useRef();\n\n  const onMouseMove = () => {};\n\n  useEffect(() => {\n    canvas.current.width = 700;\n    canvas.current.height = 700;\n    const ctx = canvas.current.getContext('2d');\n    ctx.strokeStyle = canvasState.strokeStyle;\n    ctx.lineWidth = canvasState.lineWidth;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n  }, []);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, __jsx(Canvas, {\n    ref: canvas,\n    on: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Upload;","map":{"version":3,"sources":["D:/todayDraw/front/pages/upload.js"],"names":["React","useEffect","useRef","useState","Container","styled","Ul","ul","Li","li","Canvas","canvas","Upload","canvasState","setCanvasState","painter","strokeStyle","lineWidth","onMouseMove","current","width","height","ctx","getContext","lineCap","lineJoin"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,EAAE,GAAGD,MAAM,CAACE,EAAG;;;;;CAArB;AAMA,MAAMC,EAAE,GAAGH,MAAM,CAACI,EAAG;;;;;CAArB;AAMA,MAAMC,MAAM,GAAGL,MAAM,CAACM,MAAO;;;;;;CAA7B;;AAQA,MAAMC,MAAM,GAAG,MAAM;AACnB,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCX,QAAQ,CAAC;AAC7CY,IAAAA,OAAO,EAAE,KADoC;AAE7CC,IAAAA,WAAW,EAAE,MAFgC;AAG7CC,IAAAA,SAAS,EAAE;AAHkC,GAAD,CAA9C;AAKA,QAAMN,MAAM,GAAGT,MAAM,EAArB;;AAEA,QAAMgB,WAAW,GAAG,MAAM,CAAE,CAA5B;;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,MAAM,CAACQ,OAAP,CAAeC,KAAf,GAAuB,GAAvB;AACAT,IAAAA,MAAM,CAACQ,OAAP,CAAeE,MAAf,GAAwB,GAAxB;AAEA,UAAMC,GAAG,GAAGX,MAAM,CAACQ,OAAP,CAAeI,UAAf,CAA0B,IAA1B,CAAZ;AAEAD,IAAAA,GAAG,CAACN,WAAJ,GAAkBH,WAAW,CAACG,WAA9B;AACAM,IAAAA,GAAG,CAACL,SAAJ,GAAgBJ,WAAW,CAACI,SAA5B;AACAK,IAAAA,GAAG,CAACE,OAAJ,GAAc,OAAd;AACAF,IAAAA,GAAG,CAACG,QAAJ,GAAe,OAAf;AACD,GAVQ,EAUN,EAVM,CAAT;AAYA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,GAAG,EAAEd,MAAb;AAAqB,IAAA,EAAE,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CA3BD;;AA6BA,eAAeC,MAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport Container from '../components/container';\r\nimport styled from 'styled-components';\r\n\r\nconst Ul = styled.ul`\r\n  position: absolute;\r\n  display: flex;\r\n  flex-direction: row;\r\n  transition: 0.5s;\r\n`;\r\nconst Li = styled.li`\r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 50%;\r\n  list-style: none;\r\n`;\r\nconst Canvas = styled.canvas`\r\n  width: 700px;\r\n  height: 700px;\r\n  border-radius: 15px;\r\n  background: #ffffff;\r\n  box-shadow: 18px 18px 25px #00000057, -18px -18px 25px #ffffff;\r\n`;\r\n\r\nconst Upload = () => {\r\n  const [canvasState, setCanvasState] = useState({\r\n    painter: false,\r\n    strokeStyle: '#000',\r\n    lineWidth: 2.5,\r\n  });\r\n  const canvas = useRef();\r\n\r\n  const onMouseMove = () => {}\r\n\r\n  useEffect(() => {\r\n    canvas.current.width = 700;\r\n    canvas.current.height = 700;\r\n\r\n    const ctx = canvas.current.getContext('2d');\r\n\r\n    ctx.strokeStyle = canvasState.strokeStyle;\r\n    ctx.lineWidth = canvasState.lineWidth;\r\n    ctx.lineCap = 'round';\r\n    ctx.lineJoin = 'round';\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Canvas ref={canvas} on></Canvas>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Upload;\r\n"]},"metadata":{},"sourceType":"module"}