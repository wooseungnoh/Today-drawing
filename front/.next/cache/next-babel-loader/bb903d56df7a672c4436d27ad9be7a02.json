{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { all, delay, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_FAILURE, EDITING_PROFILE_SUCCESS, EDITING_PROFILE_REQUEST, EDITING_PROFILE_FAILURE } from '../reducers/user';\n\nfunction signUpAPI(signUpData) {\n  return axios.post('http://localhost:5000/signup', signUpData, {\n    withCredentials: true\n  });\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction loginAPI(loginData) {\n  return axios.post('http://localhost:5000/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* login(action) {\n  console.log(action.data);\n\n  try {\n    const result = yield call(loginAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction editingAPI(userID) {\n  return axios.post('http://localhost:5000/editing', userID, {\n    withCredentials: true\n  });\n}\n\nfunction* editing(action) {\n  try {\n    const result = yield call(editingAPI, action.data);\n    const userData = JSON.parse(result.config.data);\n    yield put({\n      type: EDITING_PROFILE_SUCCESS,\n      data: _objectSpread({}, userData)\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: EDITING_PROFILE_FAILURE\n    });\n  }\n}\n\nfunction* watchEditing() {\n  yield takeEvery(EDITING_PROFILE_REQUEST, editing);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp), fork(watchEditing)]);\n}","map":{"version":3,"sources":["D:/todayDraw/front/sagas/user.js"],"names":["all","delay","fork","put","takeEvery","call","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_SUCCESS","SIGN_UP_REQUEST","SIGN_UP_FAILURE","EDITING_PROFILE_SUCCESS","EDITING_PROFILE_REQUEST","EDITING_PROFILE_FAILURE","signUpAPI","signUpData","post","withCredentials","signUp","action","result","data","type","e","console","log","watchSignUp","loginAPI","loginData","login","watchLogin","editingAPI","userID","editing","userData","JSON","parse","config","watchEditing","userSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeEvery, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_FAILURE,\r\n  EDITING_PROFILE_SUCCESS,\r\n  EDITING_PROFILE_REQUEST,\r\n  EDITING_PROFILE_FAILURE,\r\n} from '../reducers/user';\r\n\r\nfunction signUpAPI(signUpData) {\r\n  return axios.post('http://localhost:5000/signup', signUpData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    const result = yield call(signUpAPI, action.data);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nfunction loginAPI(loginData) {\r\n  return axios.post('http://localhost:5000/login', loginData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* login(action) {\r\n  console.log(action.data);\r\n  try {\r\n    const result = yield call(loginAPI, action.data);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeEvery(LOG_IN_REQUEST, login);\r\n}\r\n\r\nfunction editingAPI(userID) {\r\n  return axios.post('http://localhost:5000/editing', userID, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* editing(action) {\r\n  try {\r\n    const result = yield call(editingAPI, action.data);\r\n    const userData = JSON.parse(result.config.data);\r\n    \r\n    yield put({\r\n      type: EDITING_PROFILE_SUCCESS,\r\n      data: { ...userData },\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({\r\n      type: EDITING_PROFILE_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchEditing() {\r\n  yield takeEvery(EDITING_PROFILE_REQUEST, editing);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin), fork(watchSignUp), fork(watchEditing)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}