{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(Si),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchSi),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, delay, fork, put, takeEvery } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\n\nfunction loginAPI() {}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction SiAPI() {}\n\nfunction Si() {\n  return _regeneratorRuntime.wrap(function Si$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 12;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n          _context3.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchSi() {\n  return _regeneratorRuntime.wrap(function watchSi$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["D:/todayDraw/front/sagas/user.js"],"names":["login","watchLogin","Si","watchSi","userSaga","all","delay","fork","put","takeEvery","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","loginAPI","type","console","log","SiAPI"],"mappings":";;oDAUUA,K;qDAcAC,U;qDAMAC,E;qDAcAC,O;qDAIeC,Q;;AAhDzB,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,SAAhC,QAAiD,oBAAjD;AAEA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,QAIO,kBAJP;;AAMA,SAASC,QAAT,GAAoB,CAAE;;AAEtB,SAAUb,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMM,KAAK,CAAC,IAAD,CAAX;;AAFJ;AAAA;AAGI,iBAAME,GAAG,CAAC;AACRM,YAAAA,IAAI,EAAEH;AADE,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOII,UAAAA,OAAO,CAACC,GAAR;AAPJ;AAQI,iBAAMR,GAAG,CAAC;AACRM,YAAAA,IAAI,EAAEF;AADE,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUX,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMQ,SAAS,CAACC,cAAD,EAAiBV,KAAjB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAASiB,KAAT,GAAiB,CAAE;;AAEnB,SAAUf,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMI,KAAK,CAAC,IAAD,CAAX;;AAFJ;AAAA;AAGI,iBAAME,GAAG,CAAC;AACRM,YAAAA,IAAI,EAAEH;AADE,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOII,UAAAA,OAAO,CAACC,GAAR;AAPJ;AAQI,iBAAMR,GAAG,CAAC;AACRM,YAAAA,IAAI,EAAEF;AADE,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUT,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,SAAS,CAACC,cAAD,EAAiBV,KAAjB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUI,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACE,IAAI,CAACN,UAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, delay, fork, put, takeEvery } from 'redux-saga/effects';\r\n\r\nimport {\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n} from '../reducers/user';\r\n\r\nfunction loginAPI() {}\r\n\r\nfunction* login() {\r\n  try {\r\n    yield delay(2000);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeEvery(LOG_IN_REQUEST, login);\r\n}\r\n\r\nfunction SiAPI() {}\r\n\r\nfunction* Si() {\r\n  try {\r\n    yield delay(2000);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSi() {\r\n  yield takeEvery(LOG_IN_REQUEST, login);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}