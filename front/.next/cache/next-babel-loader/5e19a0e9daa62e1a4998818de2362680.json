{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPhoto),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPhoto),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(drawingSaga);\n\nimport { all, delay, fork, put, takeEvery } from 'redux-saga/effects';\nimport { UPPLOAD_CANVAS_SUCCESS, UPPLOAD_CANVAS_FAILURE } from '../reducers/drawing';\n\nfunction addPhotoApi() {}\n\nfunction addPhoto() {\n  return _regeneratorRuntime.wrap(function addPhoto$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: UPPLOAD_CANVAS_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 12;\n          return put({\n            type: UPPLOAD_CANVAS_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchAddPhoto() {\n  return _regeneratorRuntime.wrap(function watchAddPhoto$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(UPPLOAD_CANVAS_SUCCESS, addPhoto);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function drawingSaga() {\n  return _regeneratorRuntime.wrap(function drawingSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPhoto)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["D:/todayDraw/front/sagas/drawing.js"],"names":["addPhoto","watchAddPhoto","drawingSaga","all","delay","fork","put","takeEvery","UPPLOAD_CANVAS_SUCCESS","UPPLOAD_CANVAS_FAILURE","addPhotoApi","type","console","log"],"mappings":";;oDASUA,Q;qDAcAC,a;qDAIeC,W;;AA3BzB,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,SAAhC,QAAiD,oBAAjD;AAEA,SACEC,sBADF,EAEEC,sBAFF,QAGO,qBAHP;;AAKA,SAASC,WAAT,GAAuB,CAAE;;AAEzB,SAAUV,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMI,KAAK,CAAC,IAAD,CAAX;;AAFJ;AAAA;AAGI,iBAAME,GAAG,CAAC;AACRK,YAAAA,IAAI,EAAEH;AADE,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOII,UAAAA,OAAO,CAACC,GAAR;AAPJ;AAQI,iBAAMP,GAAG,CAAC;AACRK,YAAAA,IAAI,EAAEF;AADE,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUR,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,SAAS,CAACC,sBAAD,EAAyBR,QAAzB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACE,IAAI,CAACJ,aAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, delay, fork, put, takeEvery } from 'redux-saga/effects';\r\n\r\nimport {\r\n  UPPLOAD_CANVAS_SUCCESS,\r\n  UPPLOAD_CANVAS_FAILURE,\r\n} from '../reducers/drawing';\r\n\r\nfunction addPhotoApi() {}\r\n\r\nfunction* addPhoto() {\r\n  try {\r\n    yield delay(2000);\r\n    yield put({\r\n      type: UPPLOAD_CANVAS_SUCCESS,\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({\r\n      type: UPPLOAD_CANVAS_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPhoto() {\r\n  yield takeEvery(UPPLOAD_CANVAS_SUCCESS, addPhoto);\r\n}\r\n\r\nexport default function* drawingSaga() {\r\n  yield all([fork(watchAddPhoto)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}