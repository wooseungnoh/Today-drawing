{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPhoto),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPhoto),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(drawingSaga);\n\nimport { all, delay, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { UPPLOAD_CANVAS_REQUEST, UPPLOAD_CANVAS_SUCCESS, UPPLOAD_CANVAS_FAILURE } from '../reducers/drawing';\n\nfunction addPhotoApi(photoData) {\n  axios.post('http://localhost:5000/upload/uploadphoto', photoData, {\n    withCredentials: true\n  });\n}\n\nfunction addPhoto(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPhoto$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPhotoApi, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log(result.data);\n          _context.next = 7;\n          return put({\n            type: UPPLOAD_CANVAS_SUCCESS\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 14;\n          return put({\n            type: UPPLOAD_CANVAS_FAILURE\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchAddPhoto() {\n  return _regeneratorRuntime.wrap(function watchAddPhoto$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(UPPLOAD_CANVAS_REQUEST, addPhoto);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function drawingSaga() {\n  return _regeneratorRuntime.wrap(function drawingSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPhoto)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["D:/todayDraw/front/sagas/drawing.js"],"names":["addPhoto","watchAddPhoto","drawingSaga","all","delay","fork","put","takeEvery","call","axios","UPPLOAD_CANVAS_REQUEST","UPPLOAD_CANVAS_SUCCESS","UPPLOAD_CANVAS_FAILURE","addPhotoApi","photoData","post","withCredentials","action","data","result","console","log","type"],"mappings":";;oDAeUA,Q;qDAeAC,a;qDAIeC,W;;AAlCzB,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,SAAhC,EAA2CC,IAA3C,QAAuD,oBAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACEC,sBADF,EAEEC,sBAFF,EAGEC,sBAHF,QAIO,qBAJP;;AAMA,SAASC,WAAT,CAAqBC,SAArB,EAAgC;AAC9BL,EAAAA,KAAK,CAACM,IAAN,CAAW,0CAAX,EAAuDD,SAAvD,EAAkE;AAChEE,IAAAA,eAAe,EAAE;AAD+C,GAAlE;AAGD;;AAED,SAAUhB,QAAV,CAAmBiB,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMT,IAAI,CAACK,WAAD,EAAcI,MAAM,CAACC,IAArB,CAAV;;AAFnB;AAEUC,UAAAA,MAFV;AAGIC,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACD,IAAnB;AAHJ;AAII,iBAAMZ,GAAG,CAAC;AACRgB,YAAAA,IAAI,EAAEX;AADE,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIS,UAAAA,OAAO,CAACC,GAAR;AARJ;AASI,iBAAMf,GAAG,CAAC;AACRgB,YAAAA,IAAI,EAAEV;AADE,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUX,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,SAAS,CAACG,sBAAD,EAAyBV,QAAzB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACE,IAAI,CAACJ,aAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, delay, fork, put, takeEvery, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n  UPPLOAD_CANVAS_REQUEST,\r\n  UPPLOAD_CANVAS_SUCCESS,\r\n  UPPLOAD_CANVAS_FAILURE,\r\n} from '../reducers/drawing';\r\n\r\nfunction addPhotoApi(photoData) {\r\n  axios.post('http://localhost:5000/upload/uploadphoto', photoData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* addPhoto(action) {\r\n  try {\r\n    const result = yield call(addPhotoApi, action.data);\r\n    console.log(result.data)\r\n    yield put({\r\n      type: UPPLOAD_CANVAS_SUCCESS\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({\r\n      type: UPPLOAD_CANVAS_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPhoto() {\r\n  yield takeEvery(UPPLOAD_CANVAS_REQUEST, addPhoto);\r\n}\r\n\r\nexport default function* drawingSaga() {\r\n  yield all([fork(watchAddPhoto)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}